
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.8.0
 * Query Engine version: 0a83d8541752d7582de2ebc1ece46519ce72a848
 */
Prisma.prismaVersion = {
  client: "5.8.0",
  engine: "0a83d8541752d7582de2ebc1ece46519ce72a848"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  created_id: 'created_id',
  custom_value: 'custom_value',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CategoriesOnModulesScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  moduleId: 'moduleId'
};

exports.Prisma.ModulesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  value: 'value',
  created_at: 'created_at',
  updated_at: 'updated_at',
  path_make_function: 'path_make_function'
};

exports.Prisma.ResourcesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  path: 'path',
  description: 'description',
  value: 'value',
  library: 'library',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ResourcesOnModulesScalarFieldEnum = {
  id: 'id',
  moduleId: 'moduleId',
  resourceId: 'resourceId'
};

exports.Prisma.UsersOnCategoriesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  categoryId: 'categoryId',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Security_codeScalarFieldEnum = {
  id: 'id',
  id_user: 'id_user',
  code: 'code',
  date_expiration: 'date_expiration',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Token_managementsScalarFieldEnum = {
  id: 'id',
  id_user: 'id_user',
  origin: 'origin',
  token: 'token',
  expiration: 'expiration',
  data: 'data',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_configurationScalarFieldEnum = {
  id: 'id',
  id_user: 'id_user',
  pix_encoded_pixcopypaste: 'pix_encoded_pixcopypaste',
  pix_qrcode: 'pix_qrcode',
  pix_transaction_id: 'pix_transaction_id',
  pix_key: 'pix_key',
  pix_validation_code: 'pix_validation_code',
  twofactor_code: 'twofactor_code',
  fee_service_fixed: 'fee_service_fixed',
  fee_service_percent: 'fee_service_percent',
  fee_pix: 'fee_pix',
  baas_key: 'baas_key',
  baas_secret: 'baas_secret',
  baas_name: 'baas_name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  id_user: 'id_user',
  status: 'status',
  email: 'email',
  password: 'password',
  username: 'username',
  role: 'role',
  access_token: 'access_token',
  seed: 'seed',
  integration_token: 'integration_token',
  onetime_token: 'onetime_token',
  two_factor_active: 'two_factor_active',
  access_allowed: 'access_allowed',
  created_at: 'created_at',
  updated_at: 'updated_at',
  email_code: 'email_code',
  email_status: 'email_status',
  password_code: 'password_code'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Libraries = exports.$Enums.Libraries = {
  BIGDATA: 'BIGDATA'
};

exports.StatusSecurityCode = exports.$Enums.StatusSecurityCode = {
  ACTIVE: 'ACTIVE',
  CHECKED: 'CHECKED',
  CANCELED: 'CANCELED'
};

exports.Status = exports.$Enums.Status = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  BLOCKED: 'BLOCKED',
  CREATED: 'CREATED'
};

exports.Role = exports.$Enums.Role = {
  MANAGER: 'MANAGER',
  SUPPORT: 'SUPPORT',
  EMPLOYEE: 'EMPLOYEE',
  ADMIN: 'ADMIN',
  CLIENT: 'CLIENT'
};

exports.TypeEmailConfirm = exports.$Enums.TypeEmailConfirm = {
  UNCONFIRMED: 'UNCONFIRMED',
  CONFIRMED: 'CONFIRMED'
};

exports.Prisma.ModelName = {
  Categories: 'Categories',
  CategoriesOnModules: 'CategoriesOnModules',
  Modules: 'Modules',
  Resources: 'Resources',
  ResourcesOnModules: 'ResourcesOnModules',
  UsersOnCategories: 'UsersOnCategories',
  security_code: 'security_code',
  token_managements: 'token_managements',
  user_configuration: 'user_configuration',
  users: 'users'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
